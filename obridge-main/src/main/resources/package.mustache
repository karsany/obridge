package {{javaPackageName}};

import {{contextPackage}}.*;
import {{converterPackage}}.*;
import {{objectPackage}}.*;

import javax.annotation.processing.Generated;
import javax.sql.DataSource;
import java.math.BigDecimal;
import java.sql.*;
import java.util.List;
import java.util.Arrays;

@Generated(
    value = "org.obridge.generators.PackageObjectGenerator"{{#currentDateTime}},
    date = "{{currentDateTime}}"{{/currentDateTime}}{{#comment}},
    comments = "{{comment}}"
{{/comment}}
)
public final class {{javaClassName}} {

    {{#loggingInitializer}}
    {{& loggingInitializer}}
    {{/loggingInitializer}}

    private {{javaClassName}}() {
    }

    {{#procedureList}}

    public static void {{javaProcedureName}}({{storedProcedureClassName}} ctx, Connection connection) {
        try {
            final CallableStatement ocs = connection.prepareCall({{& callString}});
            try {
                {{#bindParams}}
                {{#inParam}}
                {{& paramSet}}
                {{/inParam}}
                {{#outParam}}
                {{& regOutput}}
                {{/outParam}}
                {{/bindParams}}
                {{#loggingMethod}}
                {{loggingMethod}}("{{javaClassName}}.{{javaProcedureName}} called");
                {{/loggingMethod}}
                ocs.execute();
                {{#loggingMethod}}
                {{loggingMethod}}("{{javaClassName}}.{{javaProcedureName}} executed");
                {{/loggingMethod}}
                {{#bindParams}}
                {{#outParam}}
                {{& paramGet}}
                {{/outParam}}
                {{/bindParams}}
            } finally  {
                {{^hasResultSetParam}}
                ocs.close();
                {{/hasResultSetParam}}
                {{#hasResultSetParam}}
                // ResultSet as return parameter, not closing connection
                {{/hasResultSetParam}}
            }
        } catch (SQLException e) {
            throw new StoredProcedureCallException(e);
        }
    }

    public static {{storedProcedureClassName}} {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{&javaDataType}} {{javaPropertyName}}, {{/inParam}}{{/argumentList}} Connection connection) {
        final {{storedProcedureClassName}} ctx = new {{storedProcedureClassName}}();
        {{#argumentList}}
        {{#inParam}}
        ctx.set{{javaPropertyNameBig}}({{javaPropertyName}});
        {{/inParam}}
        {{/argumentList}}

        {{javaProcedureName}}(ctx, connection);

        return ctx;
    }

    {{^hasResultSetParam}}
    public static {{storedProcedureClassName}} {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{&javaDataType}} {{javaPropertyName}}, {{/inParam}}{{/argumentList}} DataSource dataSource) {
        try {
            final Connection conn = dataSource.getConnection();
            try {
                return {{javaProcedureName}}({{#argumentList}}{{#inParam}}{{javaPropertyName}}, {{/inParam}}{{/argumentList}} conn);
            } finally {
                conn.close();
            }
        } catch (SQLException e) {
            throw new StoredProcedureCallException(e);
        }
    }
    {{/hasResultSetParam}}


    {{^hasResultSetParam}}
    public static void {{javaProcedureName}}(DataSource dataSource, {{storedProcedureClassName}} ctx) {
        try {
            final Connection conn = dataSource.getConnection();
            try {
                {{javaProcedureName}}(ctx, conn);
            } finally {
                conn.close();
            }
        } catch (SQLException e) {
            throw new StoredProcedureCallException(e);
        }
    }
    {{/hasResultSetParam}}


    {{/procedureList}}

}
